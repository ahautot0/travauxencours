/*Cette version prépare la recherche de boucles; 
elle partitionne les 170 pas d'évolution en 5 plages de longueurs croissantes*/

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <sstream> 
#include <hash_map>
using namespace std;


inline void sym4 (long long int nb, int& return1, bool& return2)   /*Cette fonction calcule les (S-1)! machines symétriques qui impriment la même suite que nb*/
	{
	long long int quo, nx, min; 
	short i,j,k,nb16[6][8]={};

	quo=min=nb;
	
	for (i=7; quo>0; i--) {nb16[0][i] = quo%16; quo=quo/16;}

	nb16[1][0]=nb16[2][2]=nb16[3][4]=nb16[4][2]=nb16[5][4]=nb16[0][0];
	nb16[1][1]=nb16[2][3]=nb16[3][5]=nb16[4][3]=nb16[5][5]=nb16[0][1];
	nb16[1][4]=nb16[2][0]=nb16[3][0]=nb16[4][4]=nb16[5][2]=nb16[0][2];
	nb16[1][5]=nb16[2][1]=nb16[3][1]=nb16[4][5]=nb16[5][3]=nb16[0][3];
	nb16[1][2]=nb16[2][4]=nb16[3][2]=nb16[4][0]=nb16[5][0]=nb16[0][4];
	nb16[1][3]=nb16[2][5]=nb16[3][3]=nb16[4][1]=nb16[5][1]=nb16[0][5];
	nb16[1][6]=nb16[2][6]=nb16[3][6]=nb16[4][6]=nb16[5][6]=nb16[0][6];
	nb16[1][7]=nb16[2][7]=nb16[3][7]=nb16[4][7]=nb16[5][7]=nb16[0][7];

	
	for (i=0; i<8; i++) 
	{
		switch (nb16[1][i]/4)
	{case 0 : break;
	 case 1 : nb16[1][i]=nb16[1][i]+4; break;
	 case 2 : nb16[1][i]=nb16[1][i]-4; break;
	 case 3 : break;}

		switch (nb16[2][i]/4)
	{case 0 : break;
	 case 1 : break;
	 case 2 : nb16[2][i]=nb16[2][i]+4; break;
	 case 3 : nb16[2][i]=nb16[2][i]-4; break;}
	
		switch (nb16[3][i]/4)
	{case 0 : break;
	 case 1 : nb16[3][i]=nb16[3][i]+4; break;
	 case 2 : nb16[3][i]=nb16[3][i]+4; break;
	 case 3 : nb16[3][i]=nb16[3][i]-8; break;}

		switch (nb16[4][i]/4)
	{case 0 : break;
	 case 1 : nb16[4][i]=nb16[4][i]+8; break;
	 case 2 : nb16[4][i]=nb16[4][i]-4; break;
	 case 3 : nb16[4][i]=nb16[4][i]-4; break;}
		
		switch (nb16[5][i]/4)
	{case 0 : break;
	 case 1 : nb16[5][i]=nb16[5][i]+8; break;
	 case 2 : break;
	 case 3 : nb16[5][i]=nb16[5][i]-8; break;}
	
	}
	
	k=1;
	for (j=1; j<6; j++) {nx=0;for (i=0; i<8; i++) {nx=16*nx + nb16[j][i];} if (nx<min) min=nx; if (nx==nb) k++;}
	return1=6/k; if (nb==min) return2=1; else return2=0;  /*Restitue return1 et return2 au main; return1 est la multiplicité (1, 2, 3 ou 6)
														  et return2 vaut 0 (skipper le calcul) ou 1 (faire le calcul complet)*/
}

/*Programme avec symétrisation mais sans détection préalable des machines qui bouclent*/

int main()
{long long int i,quo, nb, nx, halt=0, resu[321]={0}; 
int S=4,j=0,k,ipas,jj=0,j1,nbfig[2*4+1],state,pos,u,posmax,tripl,tape[170],return1,coupure[5]={4,16,48,96,170}; 
bool return2;
std::vector<unsigned char> res(16777216, '0');

 ofstream fichier("test.txt", ios::out | ios::trunc);  // ouverture en écriture avec effacement du fichier ouvert

for (nb = 0; nb <4294967296; nb+=2) {sym4(nb,return1,return2); 
	if (return2 == 0)  continue;
	else {quo=nb; for (i=2*S; i>0; i--) {nbfig[i] = quo%(4*S); quo=quo/(4*S);}   //décomposition de nb en base 4S


	for (k=0;k<170;k++) tape[k]=0;  pos=1;state=tripl=0;ipas=1;posmax=1;    //initialisation de la machine


for (k=0; k<5;k++)   {

while (pos>0  && ipas<coupure[k]) { state=tripl/4; tripl=nbfig[2*S-2*state-tape[pos]]; tape[pos]=(tripl/2) % 2; pos=pos+1-2*(tripl % 2); if (pos>posmax) posmax=pos; ipas++;}
 /*La boucle while est terminée : Si ipas==170, alors passer à la machine suivante. Si pos==0 c'est que la machine s'est arrêtée, alors faire :*/


if (pos==0) {halt=halt+return1; nx=1;for (i=posmax; i>0; i--) {nx=2*nx + tape[i];} 
             if (res[nx]=='0')  {j++; resu[j]=nx;  
			 fichier << nb  <<" : " << ipas-1  <<" : "  << resu[j] <<"\n";  res[nx]='1';}    break;}   	};  //fin du for précédent le while



             /* Ce bloc regarde si la suite codée par nx est imprimée pour la première fois. 
			 nx est l'entier binaire obtenu en préfixant la suite calculée par 1.*/ 


		;}   //fin du else


                                    ;}    //fin du for
fichier << "Nombre de machines qui se sont arrêtées : "  << halt  <<"\n";
fichier.close();
return(0)                               
	
;}